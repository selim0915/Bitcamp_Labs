 Spring을 통해서 객체의 생성과 조립(injection)을 하고 있다.
 
 1. xml 설정을 통해서 (Bean생성, injection처리)를 하고 있다.
 2. xml문서 없이도 지금과 같은 동일 작업이 가능하다.
 	=> JAVA코드를 이용해서 설정작업을 할 수 있다. (JAVA파일 + Annotation)
 	=> xml파일은 없어도 된다.
 	
3. 기존
ApplicationContext context = 
				new GenericXmlApplicationContext("classpath:DI_Annotation_04/DI_Annotation_04.xml"); //classpath
				
4. 현재
ApplicationContext context = new AnnotationConfigApplicationContext(ConfigContext.class);


------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------




사용 어노테이션은
1.  @Configuration :해당 클래스가 [스프링의 설정]으로 사용됨을 지정 (xml을 대체 할 거야)
    ex)
    @Configuration
    public class configcontext {}

2.  @Bean
    ex)
    @Configuration
    public class configcontext {
      
       @Bean
       public User user(){
         return new User();
       }
       
       xml 에서 아래코드과 같은 형태를 위 코드처럼 함수(method) 의 형태로 설계 
       <bean id="user" class="DI.User">
    }
    
result :
> 어노테이션과 [메서드 이름]을 이용해서 스프링 컨테이너가 사용할 빈 객체 설정
> 메서드가 리턴하는 객체를 빈객체로 사용하겠다

class MemberRegisterService{
   private MemberDao memberdao;
   public MemberRegisterService(MemberDao memberdao){
      this.memberdao = memberdao;
   }
}

1. xml 설정
<bean id="memberRegSvc" class="MemberRegisterService">
  <constructor-arg  ref="memberdao">
</bean>
<bean id="memberdao" class="MemberDao" />
  
  
   
1.1 추가 : @Autowired 적용
class MemberRegisterService{
   private MemberDao memberdao;
   
   @Autowired
   public MemberRegisterService(MemberDao memberdao){
      this.memberdao = memberdao;
   }
}   


<context:annotation-config/>
<bean id="memberRegSvc" class="MemberRegisterService"></bean>
<bean id="memberdao" class="MemberDao" />   
 
 
   
2. @Configuration
   @bean
   두개의 어노테이션을 이용해서 (java 코드 기반의 작업)
   
   @Configuration
   class Configcontext{
         
         @bean
         public MemberRegisterService memberRegSvc(){
           return new MemberRegisterService(memberdao()); //함수를 통한 주입
         } 
         
         @bean
         public MemberDao memberdao(){
          return new MemberDao();
         }
   }
   
-------------------------------------------------------------
옵션 :
<bean id="m" class="board"></bean>

=> 자바코드
@bean
public board m(){
  return new board();
}

옵션_1
@bean(name="hello")
public board m(){
  return new board();
}
 
 
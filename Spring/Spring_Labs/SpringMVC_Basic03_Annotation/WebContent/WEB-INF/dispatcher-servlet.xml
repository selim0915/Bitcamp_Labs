<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd">
	<!-- 
		XML파일
		IOC컨테이너에 적재 될 bean객체 생성과 injection (DI)
	 -->	
	
	<!-- 의존관계에 필요한 빈 객체 자동 생성
	@Autowired, @Resource 
	
	
	@Component
	@Repository
	@Service
	@Controller
	
	<context:component-scan base-package="com.controller" />
	
	annotaion을 가진 class에 대해서 
	<bean id="">별도로 생성 할 필요 없다
	자동으로 빈 객체가 생성된다.
	
	-->
	<context:annotation-config/>
	<!-- 공통빈 -->
	<bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>
	
	<!-- TEST_1 -->
	<!-- compponent-scan 으로 작업하기 설명 -->
	<bean id="helloController" class="com.controller.HelloController"></bean>
	
	
	<!-- TEST_2 -->
	<!-- 
		하나의 요청 주소: GET, POST 처리
		화면단, 처리단 (로그인화면,로그인처리 : 글쓰기화면,글쓰기처리)
		전제조건 : 요청 주소가 같다.
		
		id, name 참조가(injextion)이면 (0)
		
		@Autowired >> com.service.Article
	 -->
	 
	 <bean class="com.controller.NewArticleController"></bean>
	 <bean class="com.service.ArticleService"></bean>
	 
	 
	 <!-- TEST_3 -->
	 <!-- get, post방식 처리인데, list처리 하는거 -->
	 <bean class="com.controller.OrderController"></bean>
	 
	 
	 <!-- TEST_4 -->
	 <!-- parameter 설정하기 (@RequestParam 연습하기 -->
	 <bean class="com.controller.SearchController"></bean>
	 
	 
	 <!-- TEST_5 -->
	 <!-- @Cookievalue annotation 사용하기 -->
	 <bean class="com.controller.CookieController"></bean>
	 
	 <!-- TEST_6 -->
	 <!-- 
	 	import org.springframework.web.multipart.commons.CommonsMultipartResolver;
		import org.springframework.web.multipart.commons.CommonsFileUploadSupport;
		CommonsMultipartFile을 사용하기 위해서는 CommonMultipartResolver 빈객체가 IOC컨테이너 생성되어 있어야 한다.
		
		CommonsMultipartResolver 역할: Upload파일의 정보를 관리(크기, 이름)
		
		의존객체:
		org.apache.commons.fileupload
		com.springsource.org.apache.commons.io
	  -->
	  <bean class="com.controller.ImageController"></bean>
	  <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	  	<property name="maxUploadSize" value="10485760"></property> <!-- 10M -->
	  </bean>
	  
	  
</beans>


